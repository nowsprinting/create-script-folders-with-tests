name: Test

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '.github/'
      - '!.github/workflows/test.yml'
  pull_request:
    types: [ opened, synchronize, reopened ]  # Same as default
    paths-ignore:
      - '**.md'
      - '.github/'
      - '!.github/workflows/test.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneLinux64
        unityVersion: # Available versions see: https://game.ci/docs/docker/versions
          - 2019.4.40f1
          - 2022.2.5f1
        include:
          - unityVersion: 2022.2.5f1
            octocov: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: false
          lfs: false

      - name: Set package and assembly name
        run: |
          echo "package=$(grep -o -E '"name": "(.+)"' ./package.json | cut -d ' ' -f2)" >> "$GITHUB_OUTPUT"
          echo "assembly=$(find ./Editor -name "*.asmdef" | sed -e s/.*\\/// | sed -e s/\\.Editor\\.asmdef//)" >> "$GITHUB_OUTPUT"
        id: names

      - name: Crete project for tests
        uses: nowsprinting/create-unity-project-action@v2
        with:
          project-path: UnityProject~

      - uses: actions/cache@v3
        with:
          path: ${{ env.CREATED_PROJECT_PATH }}/Library
          key: Library-${{ matrix.targetPlatform }}-${{ matrix.unityVersion }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-
            Library-

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Set npm bin path for cache
        run: echo "path=$(npm bin -g)" >> "$GITHUB_OUTPUT"
        id: npm_bin

      - uses: actions/cache@v3
        with:
          path: ${{ steps.npm_bin.outputs.path }}
          key: npm-${{ hashFiles('.github/workflows/test.yml') }}

      - name: Install dependencies
        run: |
          npm install -g openupm-cli
          openupm add -f com.unity.test-framework@1.3.2
          openupm add -f com.unity.testtools.codecoverage@1.2.2
          openupm add -ft "${{ steps.names.outputs.package }}"@file:../../
        working-directory: ${{ env.CREATED_PROJECT_PATH }}

      - name: Set license secret key
        run: echo "secret_key=UNITY_LICENSE_$(echo ${{ matrix.unityVersion }} | cut -c 1-4)" >> "$GITHUB_OUTPUT"
        id: license

      - name: Run tests
        uses: game-ci/unity-test-runner@v2
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          unityVersion: ${{ matrix.unityVersion }}  # Default is `auto`
          checkName: test result (${{ matrix.unityVersion }})
          projectPath: ${{ env.CREATED_PROJECT_PATH }}
          customParameters: -testCategory "!IgnoreCI"
          coverageOptions: generateAdditionalMetrics;generateTestReferences;generateHtmlReport;generateAdditionalReports;dontClear;assemblyFilters:+${{ steps.names.outputs.assembly }}*,-*.Tests
          # see: https://docs.unity3d.com/Packages/com.unity.testtools.codecoverage@1.2/manual/CoverageBatchmode.html
        env:
          UNITY_LICENSE: ${{ secrets[steps.license.outputs.secret_key] }}
        id: test

      - name: Set coverage path for octocov
        run: sed -i -r 's/\.\/Logs/${{ steps.test.outputs.coveragePath }}/' .octocov.yml
        if: ${{ matrix.octocov }}

      - name: Run octocov
        uses: k1LoW/octocov-action@v0
        if: ${{ matrix.octocov }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: TestResults-Unity${{ matrix.unityVersion }}
          path: |
            ${{ steps.test.outputs.artifactsPath }}
            ${{ steps.test.outputs.coveragePath }}
        if: always()

  notify:
    needs: test
    runs-on: ubuntu-latest
    if: always()

    steps:
      - uses: Gamesight/slack-workflow-status@v1.2.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
